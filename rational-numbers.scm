(load "gcd.scm")

(define (make-rat n d)
    (let (
            (g (abs (gcd n d)))
            (n (cond ((and (< n 0) (< d 0)) (- n))
                     ((and (> n 0) (< d 0)) (- n))
                     (else n)
               )
            )
            (d (cond ((and (< n 0) (< d 0)) (- d))
                     ((and (> n 0) (< d 0)) (- d))
                     (else d)
               )
            )
         )
        (cons (/ n g) (/ d g))
    )
)

(define (numer x) (car x))
(define (denom x) (cdr x))

(define (add-rat x y)
    (make-rat (+ (* (numer x) (denom y))
                 (* (numer y) (denom x))
              )
              (* (denom x) (denom y))
    )
)

(define (sub-rat x y)
    (make-rat (- (* (numer x) (denom y))
                 (* (numer y) (denom x))
              )
              (* (denom x) (denom y))
    )
)

(define (mul-rat x y)
    (make-rat (* (numer x) (numer y))
              (* (denom x) (denom y)) 
    )
)

(define (div-rat x y)
    (make-rat (* (numer x) (denom y))
              (* (denom x) (numer y))
    )
)

(define (equal-rat? x y)
    (= (* (numer x) (denom y))
       (* (numer y) (denom x))
    )
)

(define (print-rat x)
    (newline)
    (display (numer x))
    (display "/")
    (display (denom x))
)

(define one-third (make-rat 1 3))
(define one-half (make-rat 1 2))
(print-rat (add-rat one-third one-third))

(print-rat (mul-rat (make-rat 2 -3) (make-rat -4 5)))
